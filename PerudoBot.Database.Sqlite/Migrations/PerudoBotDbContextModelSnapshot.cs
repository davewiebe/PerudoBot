// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PerudoBot.Database.Data;

#nullable disable

namespace PerudoBot.Database.Migrations
{
    [DbContext(typeof(PerudoBotDbContext))]
    partial class PerudoBotDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PerudoBot.Database.Data.Action", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GamePlayerId")
                        .HasColumnType("int");

                    b.Property<int>("GamePlayerRoundId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentActionId")
                        .HasColumnType("int");

                    b.Property<int?>("RoundId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GamePlayerId");

                    b.HasIndex("GamePlayerRoundId");

                    b.HasIndex("ParentActionId");

                    b.HasIndex("RoundId");

                    b.ToTable("Actions", (string)null);

                    b.HasDiscriminator<string>("ActionType").HasValue("Action");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("PerudoBot.Database.Data.DiscordPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BotKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("IsAdministrator")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBot")
                        .HasColumnType("bit");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("DiscordPlayers");
                });

            modelBuilder.Entity("PerudoBot.Database.Data.EloSeason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("GuildId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("SeasonName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EloSeasons");
                });

            modelBuilder.Entity("PerudoBot.Database.Data.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int>("GamePlayerTurnId")
                        .HasColumnType("int");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Mode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int>("WinnerPlayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("PerudoBot.Database.Data.GamePlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfDice")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<int>("TurnOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.ToTable("GamePlayers");
                });

            modelBuilder.Entity("PerudoBot.Database.Data.GamePlayerRound", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Dice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GamePlayerId")
                        .HasColumnType("int");

                    b.Property<int?>("RoundId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GamePlayerId");

                    b.HasIndex("RoundId");

                    b.ToTable("GamePlayerRounds");
                });

            modelBuilder.Entity("PerudoBot.Database.Data.Metadata", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("GameId")
                        .HasColumnType("int");

                    b.Property<int?>("GamePlayerId")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("GamePlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Metadata");
                });

            modelBuilder.Entity("PerudoBot.Database.Data.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("PerudoBot.Database.Data.PlayerElo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EloSeasonId")
                        .HasColumnType("int");

                    b.Property<string>("GameMode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EloSeasonId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerElos");
                });

            modelBuilder.Entity("PerudoBot.Database.Data.Round", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<string>("RoundType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartingPlayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Rounds", (string)null);

                    b.HasDiscriminator<string>("RoundType").HasValue("Round");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("PerudoBot.Database.Data.Bid", b =>
                {
                    b.HasBaseType("PerudoBot.Database.Data.Action");

                    b.Property<int>("Pips")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Bid");
                });

            modelBuilder.Entity("PerudoBot.Database.Data.ExactCall", b =>
                {
                    b.HasBaseType("PerudoBot.Database.Data.Action");

                    b.HasDiscriminator().HasValue("ExactCall");
                });

            modelBuilder.Entity("PerudoBot.Database.Data.LiarCall", b =>
                {
                    b.HasBaseType("PerudoBot.Database.Data.Action");

                    b.HasDiscriminator().HasValue("LiarCall");
                });

            modelBuilder.Entity("PerudoBot.Database.Data.StandardRound", b =>
                {
                    b.HasBaseType("PerudoBot.Database.Data.Round");

                    b.HasDiscriminator().HasValue("StandardRound");
                });

            modelBuilder.Entity("PerudoBot.Database.Data.Action", b =>
                {
                    b.HasOne("PerudoBot.Database.Data.GamePlayer", "GamePlayer")
                        .WithMany()
                        .HasForeignKey("GamePlayerId");

                    b.HasOne("PerudoBot.Database.Data.GamePlayerRound", "GamePlayerRound")
                        .WithMany("Actions")
                        .HasForeignKey("GamePlayerRoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PerudoBot.Database.Data.Action", "ParentAction")
                        .WithMany()
                        .HasForeignKey("ParentActionId");

                    b.HasOne("PerudoBot.Database.Data.Round", "Round")
                        .WithMany("Actions")
                        .HasForeignKey("RoundId");

                    b.Navigation("GamePlayer");

                    b.Navigation("GamePlayerRound");

                    b.Navigation("ParentAction");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("PerudoBot.Database.Data.DiscordPlayer", b =>
                {
                    b.HasOne("PerudoBot.Database.Data.Player", "Player")
                        .WithOne("DiscordPlayer")
                        .HasForeignKey("PerudoBot.Database.Data.DiscordPlayer", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("PerudoBot.Database.Data.GamePlayer", b =>
                {
                    b.HasOne("PerudoBot.Database.Data.Game", "Game")
                        .WithMany("GamePlayers")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PerudoBot.Database.Data.Player", "Player")
                        .WithMany("GamesPlayed")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("PerudoBot.Database.Data.GamePlayerRound", b =>
                {
                    b.HasOne("PerudoBot.Database.Data.GamePlayer", "GamePlayer")
                        .WithMany("GamePlayerRounds")
                        .HasForeignKey("GamePlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PerudoBot.Database.Data.Round", "Round")
                        .WithMany("GamePlayerRounds")
                        .HasForeignKey("RoundId");

                    b.Navigation("GamePlayer");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("PerudoBot.Database.Data.Metadata", b =>
                {
                    b.HasOne("PerudoBot.Database.Data.Game", null)
                        .WithMany("Metadata")
                        .HasForeignKey("GameId");

                    b.HasOne("PerudoBot.Database.Data.GamePlayer", null)
                        .WithMany("Metadata")
                        .HasForeignKey("GamePlayerId");

                    b.HasOne("PerudoBot.Database.Data.Player", null)
                        .WithMany("Metadata")
                        .HasForeignKey("PlayerId");
                });

            modelBuilder.Entity("PerudoBot.Database.Data.PlayerElo", b =>
                {
                    b.HasOne("PerudoBot.Database.Data.EloSeason", "EloSeason")
                        .WithMany("PlayerElos")
                        .HasForeignKey("EloSeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PerudoBot.Database.Data.Player", "Player")
                        .WithMany("PlayerElos")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EloSeason");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("PerudoBot.Database.Data.Round", b =>
                {
                    b.HasOne("PerudoBot.Database.Data.Game", "Game")
                        .WithMany("Rounds")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("PerudoBot.Database.Data.EloSeason", b =>
                {
                    b.Navigation("PlayerElos");
                });

            modelBuilder.Entity("PerudoBot.Database.Data.Game", b =>
                {
                    b.Navigation("GamePlayers");

                    b.Navigation("Metadata");

                    b.Navigation("Rounds");
                });

            modelBuilder.Entity("PerudoBot.Database.Data.GamePlayer", b =>
                {
                    b.Navigation("GamePlayerRounds");

                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("PerudoBot.Database.Data.GamePlayerRound", b =>
                {
                    b.Navigation("Actions");
                });

            modelBuilder.Entity("PerudoBot.Database.Data.Player", b =>
                {
                    b.Navigation("DiscordPlayer");

                    b.Navigation("GamesPlayed");

                    b.Navigation("Metadata");

                    b.Navigation("PlayerElos");
                });

            modelBuilder.Entity("PerudoBot.Database.Data.Round", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("GamePlayerRounds");
                });
#pragma warning restore 612, 618
        }
    }
}
